/// <reference types="node" />
import type { Request, Response, NextFunction } from 'express';
/**
 * The type of interaction this request is.
 */
declare enum InteractionType {
    /**
     * A ping.
     */
    PING = 1,
    /**
     * A command invocation.
     */
    APPLICATION_COMMAND = 2
}
/**
 * The type of response that is being sent.
 */
declare enum InteractionResponseType {
    /**
     * Acknowledge a `PING`.
     */
    PONG = 1,
    /**
     * Respond with a message, showing the user's input.
     */
    CHANNEL_MESSAGE_WITH_SOURCE = 4,
    /**
     * Acknowledge a command without sending a message, showing the user's input. Requires follow-up.
     */
    DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE = 5
}
/**
 * Flags that can be included in an Interaction Response.
 */
declare enum InteractionResponseFlags {
    /**
     * Show the message only to the user that performed the interaction. Message
     * does not persist between sessions.
     */
    EPHEMERAL = 64
}
/**
 * Validates a payload from Discord against its signature and key.
 *
 * @param rawBody - The raw payload data
 * @param signature - The signature from the `X-Signature-Ed25519` header
 * @param timestamp - The timestamp from the `X-Signature-Timestamp` header
 * @param clientPublicKey - The public key from the Discord developer dashboard
 * @returns Whether or not validation was successful
 */
declare function verifyKey(body: Uint8Array | ArrayBuffer | Buffer | string, signature: Uint8Array | ArrayBuffer | Buffer | string, timestamp: Uint8Array | ArrayBuffer | Buffer | string, clientPublicKey: Uint8Array | ArrayBuffer | Buffer | string): boolean;
/**
 * Creates a middleware function for use in Express-compatible web servers.
 *
 * @param clientPublicKey - The public key from the Discord developer dashboard
 * @returns The middleware function
 */
declare function verifyKeyMiddleware(clientPublicKey: string): (req: Request, res: Response, next: NextFunction) => void;
export { InteractionType, InteractionResponseType, InteractionResponseFlags, verifyKey, verifyKeyMiddleware };
